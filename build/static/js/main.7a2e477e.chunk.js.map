{"version":3,"sources":["SolarPunkPainting.jpg","App.js","reportWebVitals.js","index.js"],"names":["App","web3","Web3","givenProvider","useState","account","setOwnerAccount","setChainID","setNetwork","contractAddress","setContractAddress","contract","setContract","customerAddress","setCustomerAddress","donorAddress","setDonorAddress","agreementValue","setAgreementValue","weight1","setWeight1","weight2","setWeight2","weight3","setWeight3","connected","connect","a","eth","getChainId","chain","net","getNetworkType","getAccounts","accounts","acc","console","log","address","map","_contract","Contract","BrightLink","abi","methods","addNewCustomer","send","then","setBaseLine","UpdateOracleData","settleAgreement","className","style","backgroundImage","background","backgroundPosition","backgroundSize","backgroundRepeat","width","height","onClick","color","type","value","placeholder","onChange","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a2e477e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/SolarPunkPainting.f8d155ba.jpg\";","import React, {useState, useEffect} from 'react';\nimport \"./App.css\";\nimport Web3 from 'web3'\nimport background from \"./SolarPunkPainting.jpg\";\nimport BrightLink from './artifacts/contracts/BrightLink.json';\nimport map from \"./artifacts/deployments/map.json\"\n\n\n// uses functional component syntax\nfunction App(){\n\n  // web3 is whatever is injected by metamask, else localhost\n  // add deployed address for Solidity Storage contract\n  const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n  // define vars and functions to update them, associated to react state\n  \n  const [account, setOwnerAccount] = useState()\n  const [chainID, setChainID] = useState()\n  const [network, setNetwork] = useState()\n  const [contractAddress, setContractAddress] = useState()\n  const [contract, setContract] = useState()\n  const[customerAddress, setCustomerAddress] = useState()\n  const[donorAddress, setDonorAddress] = useState()\n  const [agreementValue, setAgreementValue] = useState()\n  const[weight1, setWeight1] = useState()\n  const[weight2, setWeight2] = useState()\n  const[weight3, setWeight3] = useState()\n  const [connected, connect] = useState()\n\n\n  async function loadBlockChain(){\n    \n    const chain = await web3.eth.getChainId()\n    const net = await web3.eth.net.getNetworkType()\n    const accounts = await web3.eth.getAccounts()\n    const acc = accounts[0]\n\n    setNetwork(net)\n    setChainID(chain)\n    setOwnerAccount(acc)\n\n    console.log(chain)\n    var address = ''\n\n    if (chain =='1337'){\n      address = map[\"dev\"]['BrightLink'][0]\n    }\n    else if(chain == 42){\n      address = map[\"42\"]['BrightLink'][0]\n    }\n    else if(chain==3){\n      address = map[\"3\"]['BrightLink'][0]\n    }\n    else if(chain==4){\n       address = map[\"4\"]['BrightLink'][0]\n    }\n    else{\n      throw 'Please connect to a valid testnet'\n    }\n\n    setContractAddress(address)\n    const _contract = new web3.eth.Contract(BrightLink.abi, address, account)\n\n    setContract(_contract)\n    console.log(address)\n    console.log(_contract)\n    console.log(chain)\n    console.log(\"contract successfully loaded\")\n    \n    setWeight1(100)\n    setWeight2(100)\n    setWeight3(100)\n    connect(true)\n  }\n\n\n\n  async function AddNewCustomer(){\n   \n    await contract.methods.addNewCustomer(customerAddress,donorAddress,agreementValue)\n      .send({'from':account})\n        .then(console.log(\"successfully added new customer\"))\n    \n    console.log(customerAddress)\n    console.log(donorAddress)\n    console.log(agreementValue)\n    console.log(typeof(contract))\n\n  }\n\n  async function setBaseLine(){\n    await contract.methods.setBaseLine(customerAddress,weight1,weight2,weight3)\n      .send({'from':account})\n        .then(console.log(\"successfully set base line\"))\n  }\n\n  async function getNewData(){\n    await contract.methods.UpdateOracleData(customerAddress,weight1,weight2,weight3)\n      .send({'from':account})\n        .then(console.log(\"successfully set base line\"))\n  }\n\n  async function settleAgreement(){\n    await contract.methods.settleAgreement(customerAddress)\n    .send({'from':account})\n      .then(console.log(\"successfully set base line\"))\n\n  }\n  \n\n  return (\n  \n    <div \n    className=\"App\" \n    style={{ backgroundImage: 'url(' + background + ')',\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    width: '100vw',\n    height: '100vh',\n    }}>\n    \n    <h1>BrightLink </h1>\n\n    {<button onClick={loadBlockChain} > Connect Wallet</button>}\n    <li style={{ color: 'green'}}>\n        {connected? <p><b>connected</b></p> : null}\n      </li>\n\n   <p>BrightLink is deployed at: {contractAddress}</p>\n   <p>Connected to: {account}</p>\n    <br></br>\n    <br></br>\n\n    <p><b>Set new agreement</b></p>\n    <p><i>(you can only have one active agreement at a time)</i></p>\n    <input \n      type=\"text\"\n      value={customerAddress}\n      placeholder=\"Set Customer Address\"\n      onChange={e => setCustomerAddress(e.target.value)} />\n\n    <input \n        type=\"text\"\n        value={donorAddress}\n        placeholder=\"Set Donor Address\"\n        onChange={e => setDonorAddress(e.target.value)} />\n\n    <input\n      type=\"text\"\n      value={agreementValue}\n      placeholder=\"Set Agreement Value\"\n      onChange={e => setAgreementValue(e.target.value)} />\n\n    {<button onClick={AddNewCustomer}>Start New Agreement</button>}\n    \n    <br></br>\n    <br></br>\n\n    <p><b>Change satellite weightings and query remote sensing data</b></p>\n    <p><i>(please send 0.6 LINK to the contract to fund these queries</i></p>\n    <input\n      type=\"text\"\n      value={weight1}\n      placeholder=\"Set weight for Sentinel (%)\"\n      onChange={e => setWeight1(e.target.value)} />\n\n    <input\n      type=\"text\"\n      value={weight2}\n      placeholder=\"Set weight for Landsat (%)\"\n      onChange={e => setWeight2(e.target.value)} />\n\n    <input\n      type=\"text\"\n      value={weight3}\n      placeholder=\"Set weight for MODIS (%)\"\n      onChange={e => setWeight3(e.target.value)} />\n\n\n    {<button onClick={setBaseLine}>Set Baseline</button>}\n    {<button onClick={getNewData}>Get Updated Data</button>}\n\n    <br></br>\n    <br></br>\n    {<button onClick={settleAgreement}>Request Payout</button>}\n    \n    </div>\n\n  );\n  }\n\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}